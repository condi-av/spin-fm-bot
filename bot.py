import os
import logging
import requests
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from datetime import datetime
from database import fishing_db  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

# ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–∞–∫–∏–º –∂–µ ...

class FishingBot:
    def __init__(self):
        self.weather_cache = {}
        self.cache_timeout = 1800
        
    # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

    async def show_fishing_spots(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä—ã–±–æ–ª–æ–≤–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ –≥–æ—Ä–æ–¥–µ"""
        city = ' '.join(context.args) if context.args else None
        
        if not city:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥: /spots –ú–æ—Å–∫–≤–∞")
            return
        
        spots = fishing_db.get_spots_by_city(city.lower())
        
        if not spots:
            await update.message.reply_text(
                f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä—ã–±–æ–ª–æ–≤–Ω—ã—Ö –º–µ—Å—Ç –≤ –≥–æ—Ä–æ–¥–µ {city}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ –ú–æ—Å–∫–≤–∞\n‚Ä¢ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥\n‚Ä¢ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫\n‚Ä¢ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"
            )
            return
        
        message = f"üé£ *–†—ã–±–æ–ª–æ–≤–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ {city.title()}*\n\n"
        
        for i, spot in enumerate(spots, 1):
            rating_stars = "‚≠ê" * int(spot['avg_rating']) if spot['avg_rating'] > 0 else "‚òÜ"
            message += f"{i}. *{spot['name']}* ({spot['type']}) {rating_stars}\n"
            message += f"   üêü: {spot['fish_species']}\n"
            message += f"   üìç: {spot['description']}\n"
            message += f"   üïí: {spot['best_season']}\n"
            message += f"   üí∞: {spot['access_type']}\n\n"
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–∞
        keyboard = [
            [InlineKeyboardButton("üó∫Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", callback_data=f"map_{city}")],
            [InlineKeyboardButton("üìä –î–æ–±–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç", callback_data=f"report_{city}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(message, parse_mode='Markdown', reply_markup=reply_markup)

    async def search_spots_by_fish(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∏—Å–∫ –º–µ—Å—Ç –ø–æ –≤–∏–¥—É —Ä—ã–±—ã"""
        fish_species = ' '.join(context.args) if context.args else None
        
        if not fish_species:
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∏–¥ —Ä—ã–±—ã: /fish —â—É–∫–∞")
            return
        
        spots = fishing_db.get_spots_by_fish(fish_species.lower())
        
        if not spots:
            await update.message.reply_text(
                f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç –¥–ª—è –ª–æ–≤–ª–∏ {fish_species}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n‚Ä¢ —â—É–∫–∞\n‚Ä¢ –∫–∞—Ä–ø\n‚Ä¢ –æ–∫—É–Ω—å\n‚Ä¢ –ª–µ—â\n‚Ä¢ —Å—É–¥–∞–∫"
            )
            return
        
        message = f"üé£ *–ú–µ—Å—Ç–∞ –¥–ª—è –ª–æ–≤–ª–∏ {fish_species.title()}*\n\n"
        
        for i, spot in enumerate(spots[:5], 1):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 –º–µ—Å—Ç–∞–º–∏
            message += f"{i}. *{spot['name']}* ({spot['city'].title()})\n"
            message += f"   üìç: {spot['description']}\n"
            message += f"   üïí: {spot['best_season']}\n\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')

    async def show_recent_reports(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã –æ —Ä—ã–±–∞–ª–∫–µ"""
        reports = fishing_db.get_recent_reports(limit=5)
        
        if not reports:
            await update.message.reply_text("üìä –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –æ —Ä—ã–±–∞–ª–∫–µ")
            return
        
        message = "üìä *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã –æ —Ä—ã–±–∞–ª–∫–µ*\n\n"
        
        for report in reports:
            message += f"üìç *{report['spot_name']}*\n"
            message += f"üêü –ü–æ–π–º–∞–ª–∏: {report['fish_caught']}\n"
            message += f"‚≠ê –û—Ü–µ–Ω–∫–∞: {'‚≠ê' * report['rating']}\n"
            if report['comment']:
                message += f"üí¨: {report['comment']}\n"
            message += f"üìÖ: {report['report_date']}\n\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data.startswith('map_'):
            city = data.replace('map_', '')
            await query.edit_message_text(f"üó∫Ô∏è –§—É–Ω–∫—Ü–∏—è –∫–∞—Ä—Ç—ã –¥–ª—è {city} –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        
        elif data.startswith('report_'):
            city = data.replace('report_', '')
            await query.edit_message_text(f"üìä –§—É–Ω–∫—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è {city} –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    logger.info(f"BOT_TOKEN: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if BOT_TOKEN else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    logger.info(f"WEATHER_API_KEY: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if WEATHER_API_KEY else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    fishing_bot = FishingBot()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ (—Å—Ç–∞—Ä—ã–µ + –Ω–æ–≤—ã–µ)
    application.add_handler(CommandHandler("start", fishing_bot.start))
    application.add_handler(CommandHandler("help", fishing_bot.send_help))
    application.add_handler(CommandHandler("weather", fishing_bot.handle_weather_request))
    application.add_handler(CommandHandler("spots", fishing_bot.show_fishing_spots))
    application.add_handler(CommandHandler("fish", fishing_bot.search_spots_by_fish))
    application.add_handler(CommandHandler("reports", fishing_bot.show_recent_reports))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(fishing_bot.handle_callback))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, fishing_bot.handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(fishing_bot.error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
    application.run_polling()

if __name__ == '__main__':
    main()
