import os
import logging
import requests
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from datetime import datetime
from database import fishing_db

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –≤–∞—à–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
BOT_TOKEN = os.getenv('BOT_TOKEN', "8199190847:AAFFnG2fYEd3Zurne8yP1alevSsSeKh5VRk")
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY', "d192e284d050cbe679c3641f372e7a02")

class FishingBot:
    def __init__(self):
        self.weather_cache = {}
        self.cache_timeout = 1800  # 30 –º–∏–Ω—É—Ç

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
        keyboard = [
            ['üé£ –ü–æ–≥–æ–¥–∞ –∏ –∫–ª—ë–≤', 'üìç –†—ã–±–æ–ª–æ–≤–Ω—ã–µ –º–µ—Å—Ç–∞'],
            ['üêü –ü–æ–∏—Å–∫ –ø–æ —Ä—ã–±–µ', 'üìä –û—Ç—á–µ—Ç—ã'],
            ['üìã –ü–æ–º–æ—â—å']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø —Ç–≤–æ–π —Ä—ã–±–æ–ª–æ–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫!

üå§ *–ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É –∏ –ø—Ä–æ–≥–Ω–æ–∑ –∫–ª—ë–≤–∞
‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—å —Ä—ã–±–æ–ª–æ–≤–Ω—ã–µ –º–µ—Å—Ç–∞
‚Ä¢ –ò—Å–∫–∞—Ç—å –º–µ—Å—Ç–∞ –ø–æ –≤–∏–¥—É —Ä—ã–±—ã
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–µ–∂–∏–µ –æ—Ç—á–µ—Ç—ã

üéØ *–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ!*

üìç *–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*
‚Ä¢ –ù–∞–∂–º–∏ ¬´üé£ –ü–æ–≥–æ–¥–∞ –∏ –∫–ª—ë–≤¬ª ‚Üí –≤–≤–µ–¥–∏ ¬´–ú–æ—Å–∫–≤–∞¬ª
‚Ä¢ –ù–∞–∂–º–∏ ¬´üêü –ü–æ–∏—Å–∫ –ø–æ —Ä—ã–±–µ¬ª ‚Üí –≤–≤–µ–¥–∏ ¬´—â—É–∫–∞¬ª
‚Ä¢ –ù–∞–∂–º–∏ ¬´üìç –†—ã–±–æ–ª–æ–≤–Ω—ã–µ –º–µ—Å—Ç–∞¬ª ‚Üí –≤–≤–µ–¥–∏ ¬´–°–ü–±¬ª
        """
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

    async def send_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
üé£ *SpinFM –†—É—Å - –†—ã–±–æ–ª–æ–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫*

*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/weather [–≥–æ—Ä–æ–¥] - –ø–æ–≥–æ–¥–∞ –∏ –∫–ª—ë–≤
/spots [–≥–æ—Ä–æ–¥] - —Ä—ã–±–æ–ª–æ–≤–Ω—ã–µ –º–µ—Å—Ç–∞  
/fish [–≤–∏–¥ —Ä—ã–±—ã] - –º–µ—Å—Ç–∞ –¥–ª—è –ª–æ–≤–ª–∏
/reports - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
2. –ò–ª–∏ –≤–≤–æ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é
3. –î–ª—è –ø–æ–≥–æ–¥—ã - –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞

*–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:*
‚Ä¢ `–ú–æ—Å–∫–≤–∞` - –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ
‚Ä¢ `/spots –°–ü–±` - –º–µ—Å—Ç–∞ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ
‚Ä¢ `/fish —â—É–∫–∞` - –º–µ—Å—Ç–∞ –¥–ª—è –ª–æ–≤–ª–∏ —â—É–∫–∏

*–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≥–æ—Ä–æ–¥–∞:*
–†–æ—Å—Å–∏—è, –£–∫—Ä–∞–∏–Ω–∞, –ë–µ–ª–∞—Ä—É—Å—å, –ï–≤—Ä–æ–ø–∞, –°–®–ê, –ê–∑–∏—è
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')

    def get_weather(self, city: str) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
            cache_key = city.lower()
            if cache_key in self.weather_cache:
                cached_data = self.weather_cache[cache_key]
                if datetime.now().timestamp() - cached_data['timestamp'] < self.cache_timeout:
                    return cached_data['data']

            # –ó–∞–ø—Ä–æ—Å –∫ API –ø–æ–≥–æ–¥—ã
            url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
            response = requests.get(url, timeout=10)
            
            if response.status_code == 404:
                logger.warning(f"–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω: {city}")
                return None
            elif response.status_code != 200:
                logger.error(f"Weather API error: {response.status_code} - {response.text}")
                return None

            data = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ—Ä–æ–¥ –Ω–∞–π–¥–µ–Ω
            if data.get('cod') != 200:
                logger.warning(f"–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API: {city}")
                return None
                
            weather_data = {
                'city': data['name'],
                'temp': round(data['main']['temp']),
                'feels_like': round(data['main']['feels_like']),
                'humidity': data['main']['humidity'],
                'pressure': data['main']['pressure'],
                'wind_speed': data['wind']['speed'],
                'description': data['weather'][0]['description'].capitalize(),
                'weather_main': data['weather'][0]['main'],
                'country': data.get('sys', {}).get('country', '')
            }

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
            self.weather_cache[cache_key] = {
                'timestamp': datetime.now().timestamp(),
                'data': weather_data
            }

            return weather_data

        except Exception as e:
            logger.error(f"Error getting weather for {city}: {e}")
            return None

    def calculate_fishing_conditions(self, weather_data: dict) -> dict:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏"""
        temp = weather_data['temp']
        pressure = weather_data['pressure']
        wind_speed = weather_data['wind_speed']
        weather_main = weather_data['weather_main']

        score = 0

        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 15-25¬∞C)
        if 15 <= temp <= 25:
            temp_score = 3
        elif 10 <= temp < 15 or 25 < temp <= 30:
            temp_score = 2
        elif 5 <= temp < 10 or 30 < temp <= 35:
            temp_score = 1
        else:
            temp_score = 0
        score += temp_score

        # –î–∞–≤–ª–µ–Ω–∏–µ (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 740-750 –º–º —Ä—Ç.—Å—Ç.)
        pressure_mm = pressure * 0.750062
        if 740 <= pressure_mm <= 750:
            pressure_score = 3
        elif 735 <= pressure_mm < 740 or 750 < pressure_mm <= 755:
            pressure_score = 2
        elif 730 <= pressure_mm < 735 or 755 < pressure_mm <= 760:
            pressure_score = 1
        else:
            pressure_score = 0
        score += pressure_score

        # –í–µ—Ç–µ—Ä
        if wind_speed < 3:
            wind_score = 3
        elif 3 <= wind_speed < 6:
            wind_score = 2
        elif 6 <= wind_speed < 10:
            wind_score = 1
        else:
            wind_score = 0
        score += wind_score

        # –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        if weather_main in ['Clear']:
            weather_score = 3
        elif weather_main in ['Clouds']:
            weather_score = 2
        elif weather_main in ['Drizzle', 'Mist']:
            weather_score = 1
        else:
            weather_score = 0
        score += weather_score

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–ª—ë–≤–∞
        max_score = 12
        if score >= 10:
            rating = "–û—Ç–ª–∏—á–Ω—ã–π"
            emoji = "üî•"
            color = "üü¢"
            advice = "–ò–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —Ä—ã–±–∞–ª–∫–∏!"
        elif score >= 7:
            rating = "–•–æ—Ä–æ—à–∏–π"
            emoji = "üëç"
            color = "üü°"
            advice = "–•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ª–æ–≤–ª–∏"
        elif score >= 4:
            rating = "–°—Ä–µ–¥–Ω–∏–π"
            emoji = "‚ö°"
            color = "üü†"
            advice = "–ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª–æ–≤–∏—Ç—å"
        else:
            rating = "–ü–ª–æ—Ö–æ–π"
            emoji = "üëé"
            color = "üî¥"
            advice = "–†—ã–±–∞ –º–æ–∂–µ—Ç –Ω–µ –∫–ª–µ–≤–∞—Ç—å"

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–Ω–∞—Å—Ç—è–º
        if score >= 8:
            spinning = "–û—Ç–ª–∏—á–Ω—ã–π"
            fishing_rod = "–û—Ç–ª–∏—á–Ω—ã–π"
        elif score >= 5:
            spinning = "–•–æ—Ä–æ—à–∏–π"
            fishing_rod = "–•–æ—Ä–æ—à–∏–π"
        elif score >= 3:
            spinning = "–°—Ä–µ–¥–Ω–∏–π"
            fishing_rod = "–°—Ä–µ–¥–Ω–∏–π"
        else:
            spinning = "–ü–ª–æ—Ö–æ–π"
            fishing_rod = "–ü–ª–æ—Ö–æ–π"

        return {
            'rating': rating,
            'emoji': emoji,
            'color': color,
            'advice': advice,
            'spinning': spinning,
            'fishing_rod': fishing_rod,
            'score': score,
            'max_score': max_score,
            'pressure_mm': round(pressure_mm, 1)
        }

    async def handle_weather_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã"""
        city = update.message.text.strip()
        
        if not city or len(city) < 2:
            await update.message.reply_text("üå§ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)")
            return

        await update.message.reply_chat_action(action='typing')

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
        weather_data = self.get_weather(city)
        
        if not weather_data:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –¥–∞–¥–∏–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
            suggestions = {
                '–º–æ—Å–∫–≤–∞': '–ú–æ—Å–∫–≤–∞', '—Å–ø–±': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥', '–ø–∏—Ç–µ—Ä': '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
                '–∫–∏–µ–≤': '–ö–∏–µ–≤', '–º–∏–Ω—Å–∫': '–ú–∏–Ω—Å–∫', '–∫–∞–∑–∞–Ω—å': '–ö–∞–∑–∞–Ω—å', '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'
            }
            
            suggestion = suggestions.get(city.lower())
            if suggestion:
                await update.message.reply_text(
                    f"–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É *{suggestion}*?\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {suggestion}",
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–≥–æ–¥—É –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞.\n\n"
                    "üîç *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:*\n"
                    "‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è\n"
                    "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—Ä—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞\n\n"
                    "üåÜ *–ü—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –≥–æ—Ä–æ–¥–æ–≤:*\n"
                    "‚Ä¢ –ú–æ—Å–∫–≤–∞, –°–ü–±, –ö–∏–µ–≤, –ú–∏–Ω—Å–∫\n"
                    "‚Ä¢ –õ–æ–Ω–¥–æ–Ω, –ë–µ—Ä–ª–∏–Ω, –ü–∞—Ä–∏–∂\n"
                    "‚Ä¢ –ù—å—é-–ô–æ—Ä–∫, –¢–æ–∫–∏–æ, –ü–µ–∫–∏–Ω",
                    parse_mode='Markdown'
                )
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏
        fishing_conditions = self.calculate_fishing_conditions(weather_data)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""
{weather_data['description']} *–≤ {weather_data['city']}, {weather_data['country']}*

üå° *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {weather_data['temp']}¬∞C
üí® *–í–µ—Ç–µ—Ä:* {weather_data['wind_speed']} –º/—Å
üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å:* {weather_data['humidity']}%
üìä *–î–∞–≤–ª–µ–Ω–∏–µ:* {fishing_conditions['pressure_mm']} –º–º —Ä—Ç.—Å—Ç.

{fishing_conditions['color']} *–ü–†–û–ì–ù–û–ó –ö–õ–Å–í–ê:* {fishing_conditions['rating']} {fishing_conditions['emoji']}

üé£ *–°–ø–∏–Ω–Ω–∏–Ω–≥:* {fishing_conditions['spinning']}
üéè *–ü–æ–ø–ª–∞–≤–æ—á–Ω–∞—è —É–¥–æ—á–∫–∞:* {fishing_conditions['fishing_rod']}

*–û—Ü–µ–Ω–∫–∞:* {fishing_conditions['score']}/{fishing_conditions['max_score']} –±–∞–ª–ª–æ–≤
*–°–æ–≤–µ—Ç:* {fishing_conditions['advice']}
        """

        await update.message.reply_text(message, parse_mode='Markdown')

    async def show_fishing_spots(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä—ã–±–æ–ª–æ–≤–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ –≥–æ—Ä–æ–¥–µ - –ö–û–ú–ê–ù–î–ê"""
        city = ' '.join(context.args) if context.args else None
        
        if not city:
            # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏
            await update.message.reply_text(
                "üó∫Ô∏è *–ü–æ–∏—Å–∫ —Ä—ã–±–æ–ª–æ–≤–Ω—ã—Ö –º–µ—Å—Ç*\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "`/spots –ú–æ—Å–∫–≤–∞`\n"
                "`/spots –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥`\n"
                "`/spots –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫`\n\n"
                "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üìç –†—ã–±–æ–ª–æ–≤–Ω—ã–µ –º–µ—Å—Ç–∞¬ª",
                parse_mode='Markdown'
            )
            return
        
        await update.message.reply_chat_action(action='typing')
        
        spots = fishing_db.get_spots_by_city(city.lower())
        
        if not spots:
            await update.message.reply_text(
                f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä—ã–±–æ–ª–æ–≤–Ω—ã—Ö –º–µ—Å—Ç –≤ –≥–æ—Ä–æ–¥–µ *{city}*\n\n"
                f"üìå *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ç—Ç–∏ –≥–æ—Ä–æ–¥–∞:*\n"
                f"‚Ä¢ –ú–æ—Å–∫–≤–∞\n‚Ä¢ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥\n‚Ä¢ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫\n‚Ä¢ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥\n\n"
                f"üåç *–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫—Ä—É–ø–Ω—ã–π –≥–æ—Ä–æ–¥*",
                parse_mode='Markdown'
            )
            return
        
        message = f"üé£ *–†—ã–±–æ–ª–æ–≤–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ {city.title()}*\n\n"
        
        for i, spot in enumerate(spots, 1):
            rating_stars = "‚≠ê" * int(spot['avg_rating']) if spot['avg_rating'] > 0 else "‚òÜ"
            message += f"{i}. *{spot['name']}* ({spot['type']}) {rating_stars}\n"
            message += f"   üêü: {spot['fish_species']}\n"
            message += f"   üìç: {spot['description']}\n"
            message += f"   üïí: {spot['best_season']}\n"
            message += f"   üí∞: {spot['access_type']}\n\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')

    async def search_spots_by_fish(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∏—Å–∫ –º–µ—Å—Ç –ø–æ –≤–∏–¥—É —Ä—ã–±—ã - –ö–û–ú–ê–ù–î–ê"""
        fish_species = ' '.join(context.args) if context.args else None
        
        if not fish_species:
            await update.message.reply_text(
                "üé£ *–ü–æ–∏—Å–∫ –º–µ—Å—Ç –ø–æ –≤–∏–¥—É —Ä—ã–±—ã*\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∏–¥ —Ä—ã–±—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "`/fish —â—É–∫–∞`\n"
                "`/fish –∫–∞—Ä–ø`\n"
                "`/fish –æ–∫—É–Ω—å`\n"
                "`/fish –ª–µ—â`\n"
                "`/fish —Å—É–¥–∞–∫`\n\n"
                "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üêü –ü–æ–∏—Å–∫ –ø–æ —Ä—ã–±–µ¬ª",
                parse_mode='Markdown'
            )
            return
        
        await update.message.reply_chat_action(action='typing')
        
        spots = fishing_db.get_spots_by_fish(fish_species.lower())
        
        if not spots:
            await update.message.reply_text(
                f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç –¥–ª—è –ª–æ–≤–ª–∏ *{fish_species}*\n\n"
                f"üêü *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ç—Ç–∏ –≤–∏–¥—ã —Ä—ã–±:*\n"
                f"‚Ä¢ —â—É–∫–∞\n‚Ä¢ –∫–∞—Ä–ø\n‚Ä¢ –æ–∫—É–Ω—å\n‚Ä¢ –ª–µ—â\n‚Ä¢ —Å—É–¥–∞–∫\n‚Ä¢ –ø–ª–æ—Ç–≤–∞\n\n"
                f"üìç *–ò–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ –±–∞–∑–µ*",
                parse_mode='Markdown'
            )
            return
        
        message = f"üé£ *–ú–µ—Å—Ç–∞ –¥–ª—è –ª–æ–≤–ª–∏ {fish_species.title()}*\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–æ–¥–∞–º
        cities = {}
        for spot in spots:
            if spot['city'] not in cities:
                cities[spot['city']] = []
            cities[spot['city']].append(spot)
        
        for city, city_spots in list(cities.items())[:3]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 3 –≥–æ—Ä–æ–¥–∞–º–∏
            message += f"üèôÔ∏è *{city.title()}*\n"
            for spot in city_spots[:2]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 2 –º–µ—Å—Ç–∞–º–∏ –Ω–∞ –≥–æ—Ä–æ–¥
                message += f"‚Ä¢ *{spot['name']}* - {spot['description']}\n"
            message += "\n"
        
        message += f"üîç *–ù–∞–π–¥–µ–Ω–æ –≤—Å–µ–≥–æ: {len(spots)} –º–µ—Å—Ç*"
        
        await update.message.reply_text(message, parse_mode='Markdown')

    async def show_recent_reports(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã –æ —Ä—ã–±–∞–ª–∫–µ"""
        reports = fishing_db.get_recent_reports(limit=5)
        
        if not reports:
            await update.message.reply_text(
                "üìä *–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –æ —Ä—ã–±–∞–ª–∫–µ*\n\n"
                "–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º, –∫—Ç–æ –¥–æ–±–∞–≤–∏—Ç –æ—Ç—á–µ—Ç –æ —Å–≤–æ–µ–π —Ä—ã–±–∞–ª–∫–µ!",
                parse_mode='Markdown'
            )
            return
        
        message = "üìä *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã –æ —Ä—ã–±–∞–ª–∫–µ*\n\n"
        
        for report in reports:
            message += f"üìç *{report['spot_name']}*\n"
            message += f"üêü –ü–æ–π–º–∞–ª–∏: {report['fish_caught']}\n"
            message += f"‚≠ê –û—Ü–µ–Ω–∫–∞: {'‚≠ê' * report['rating']}\n"
            if report['comment']:
                message += f"üí¨: {report['comment']}\n"
            message += f"üìÖ: {report['report_date']}\n\n"
        
        await update.message.reply_text(message, parse_mode='Markdown')

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text.strip()
        
        if text == 'üìã –ü–æ–º–æ—â—å':
            await self.send_help(update, context)
        elif text == 'üé£ –ü–æ–≥–æ–¥–∞ –∏ –∫–ª—ë–≤':
            await update.message.reply_text(
                "üå§ *–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:*\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ –ú–æ—Å–∫–≤–∞\n‚Ä¢ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥\n‚Ä¢ –ö–∏–µ–≤\n‚Ä¢ –õ–æ–Ω–¥–æ–Ω\n‚Ä¢ –ë–µ—Ä–ª–∏–Ω",
                parse_mode='Markdown'
            )
        elif text == 'üìç –†—ã–±–æ–ª–æ–≤–Ω—ã–µ –º–µ—Å—Ç–∞':
            await update.message.reply_text(
                "üó∫Ô∏è *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç:*\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ –ú–æ—Å–∫–≤–∞\n‚Ä¢ –°–ü–±\n‚Ä¢ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫\n‚Ä¢ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥",
                parse_mode='Markdown'
            )
        elif text == 'üêü –ü–æ–∏—Å–∫ –ø–æ —Ä—ã–±–µ':
            await update.message.reply_text(
                "üé£ *–í–≤–µ–¥–∏—Ç–µ –≤–∏–¥ —Ä—ã–±—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:*\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ —â—É–∫–∞\n‚Ä¢ –∫–∞—Ä–ø\n‚Ä¢ –æ–∫—É–Ω—å\n‚Ä¢ –ª–µ—â\n‚Ä¢ —Å—É–¥–∞–∫",
                parse_mode='Markdown'
            )
        elif text == 'üìä –û—Ç—á–µ—Ç—ã':
            await self.show_recent_reports(update, context)
        else:
            # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç - –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
            lower_text = text.lower()
            
            # –ï—Å–ª–∏ –≤–≤–µ–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä—ã–±—ã - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –ø–æ —Ä—ã–±–µ
            fish_keywords = ['—â—É–∫–∞', '–∫–∞—Ä–ø', '–æ–∫—É–Ω—å', '–ª–µ—â', '—Å—É–¥–∞–∫', '–ø–ª–æ—Ç–≤–∞', '–∫–∞—Ä–∞—Å—å', '–ª–∏–Ω—å']
            if any(fish in lower_text for fish in fish_keywords):
                await update.message.reply_text(
                    f"üé£ *–î–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç –ø–æ —Ä—ã–±–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:*\n\n"
                    f"–ö–Ω–æ–ø–∫—É ¬´üêü –ü–æ–∏—Å–∫ –ø–æ —Ä—ã–±–µ¬ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É:\n`/fish {text}`",
                    parse_mode='Markdown'
                )
                return
            
            # –ï—Å–ª–∏ –≤–≤–µ–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç (–≤–æ–∑–º–æ–∂–Ω–æ –≥–æ—Ä–æ–¥ –¥–ª—è –º–µ—Å—Ç)
            elif len(text) < 10 and not any(char.isdigit() for char in text):
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                await update.message.reply_text(
                    f"üîç *–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?*\n\n"
                    f"–ï—Å–ª–∏ —ç—Ç–æ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–≥–æ–¥—ã - –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ\n"
                    f"–ï—Å–ª–∏ —ç—Ç–æ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n`/spots {text}`\n\n"
                    f"–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
                    parse_mode='Markdown'
                )
                return
            
            # –ò–Ω–∞—á–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –ø–æ–≥–æ–¥—ã
            else:
                await self.handle_weather_request(update, context)

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data.startswith('map_'):
            city = data.replace('map_', '')
            await query.edit_message_text(f"üó∫Ô∏è –§—É–Ω–∫—Ü–∏—è –∫–∞—Ä—Ç—ã –¥–ª—è {city} –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        
        elif data.startswith('report_'):
            city = data.replace('report_', '')
            await query.edit_message_text(f"üìä –§—É–Ω–∫—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è {city} –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
        if update and update.message:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    logger.info(f"BOT_TOKEN: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if BOT_TOKEN else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    logger.info(f"WEATHER_API_KEY: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if WEATHER_API_KEY else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    if not WEATHER_API_KEY:
        logger.error("‚ùå WEATHER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    fishing_bot = FishingBot()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", fishing_bot.start))
    application.add_handler(CommandHandler("help", fishing_bot.send_help))
    application.add_handler(CommandHandler("weather", fishing_bot.handle_weather_request))
    application.add_handler(CommandHandler("spots", fishing_bot.show_fishing_spots))
    application.add_handler(CommandHandler("fish", fishing_bot.search_spots_by_fish))
    application.add_handler(CommandHandler("reports", fishing_bot.show_recent_reports))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    application.add_handler(CallbackQueryHandler(fishing_bot.handle_callback))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, fishing_bot.handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(fishing_bot.error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
    application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()
