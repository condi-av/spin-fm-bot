import os
import logging
import requests
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from datetime import datetime
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –≤–∞—à–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
BOT_TOKEN = os.getenv('BOT_TOKEN', "8199190847:AAFFnG2fYEd3Zurne8yP1alevSsSeKh5VRk")
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY', "d192e284d050cbe679c3641f372e7a02")

class FishingBot:
    def __init__(self):
        self.weather_cache = {}
        self.cache_timeout = 1800  # 30 –º–∏–Ω—É—Ç

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        keyboard = [['üé£ –ü–æ–≥–æ–¥–∞ –∏ –∫–ª—ë–≤'], ['üìä –ü–æ–º–æ—â—å']]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø —Ç–≤–æ–π —Ä—ã–±–æ–ª–æ–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫!

üå§ –Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ –∏ —Å–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª—ë–≤ —Ä—ã–±—ã.

üéØ –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´üé£ –ü–æ–≥–æ–¥–∞ –∏ –∫–ª—ë–≤¬ª –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞!
        """
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)

    async def send_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
        help_text = """
üé£ *–†—ã–±–æ–ª–æ–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫*

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/weather [–≥–æ—Ä–æ–¥] - –ø–æ–≥–æ–¥–∞ –∏ –∫–ª—ë–≤
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üé£ –ü–æ–≥–æ–¥–∞ –∏ –∫–ª—ë–≤¬ª
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞)
3. –ü–æ–ª—É—á–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑!

*–§–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è—é—â–∏–µ –Ω–∞ –∫–ª—ë–≤:*
‚úÖ *–û—Ç–ª–∏—á–Ω—ã–π*: —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ 15-25¬∞C, –ª–µ–≥–∫–∏–π –≤–µ—Ç–µ—Ä
üëç *–•–æ—Ä–æ—à–∏–π*: –Ω–µ–±–æ–ª—å—à–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
‚ö° *–°—Ä–µ–¥–Ω–∏–π*: —É–º–µ—Ä–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
üëé *–ü–ª–æ—Ö–æ–π*: —Ä–µ–∑–∫–∏–µ –ø–µ—Ä–µ–ø–∞–¥—ã, —Å–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä, –≥—Ä–æ–∑–∞
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')

    def get_weather(self, city: str) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
            cache_key = city.lower()
            if cache_key in self.weather_cache:
                cached_data = self.weather_cache[cache_key]
                if datetime.now().timestamp() - cached_data['timestamp'] < self.cache_timeout:
                    return cached_data['data']

            # –ó–∞–ø—Ä–æ—Å –∫ API –ø–æ–≥–æ–¥—ã
            url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric&lang=ru"
            response = requests.get(url, timeout=10)
            
            if response.status_code != 200:
                logger.error(f"Weather API error: {response.status_code}")
                return None

            data = response.json()
            
            weather_data = {
                'city': data['name'],
                'temp': round(data['main']['temp']),
                'feels_like': round(data['main']['feels_like']),
                'humidity': data['main']['humidity'],
                'pressure': data['main']['pressure'],
                'wind_speed': data['wind']['speed'],
                'description': data['weather'][0]['description'].capitalize(),
                'weather_main': data['weather'][0]['main'],
                'country': data.get('sys', {}).get('country', '')
            }

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
            self.weather_cache[cache_key] = {
                'timestamp': datetime.now().timestamp(),
                'data': weather_data
            }

            return weather_data

        except Exception as e:
            logger.error(f"Error getting weather: {e}")
            return None

    def calculate_fishing_conditions(self, weather_data: dict) -> dict:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏"""
        temp = weather_data['temp']
        pressure = weather_data['pressure']
        wind_speed = weather_data['wind_speed']
        weather_main = weather_data['weather_main']

        score = 0

        # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 15-25¬∞C)
        if 15 <= temp <= 25:
            temp_score = 3
        elif 10 <= temp < 15 or 25 < temp <= 30:
            temp_score = 2
        elif 5 <= temp < 10 or 30 < temp <= 35:
            temp_score = 1
        else:
            temp_score = 0
        score += temp_score

        # –î–∞–≤–ª–µ–Ω–∏–µ (–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ 740-750 –º–º —Ä—Ç.—Å—Ç.)
        pressure_mm = pressure * 0.750062
        if 740 <= pressure_mm <= 750:
            pressure_score = 3
        elif 735 <= pressure_mm < 740 or 750 < pressure_mm <= 755:
            pressure_score = 2
        elif 730 <= pressure_mm < 735 or 755 < pressure_mm <= 760:
            pressure_score = 1
        else:
            pressure_score = 0
        score += pressure_score

        # –í–µ—Ç–µ—Ä
        if wind_speed < 3:
            wind_score = 3
        elif 3 <= wind_speed < 6:
            wind_score = 2
        elif 6 <= wind_speed < 10:
            wind_score = 1
        else:
            wind_score = 0
        score += wind_score

        # –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è
        if weather_main in ['Clear']:
            weather_score = 3
        elif weather_main in ['Clouds']:
            weather_score = 2
        elif weather_main in ['Drizzle', 'Mist']:
            weather_score = 1
        else:
            weather_score = 0
        score += weather_score

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∫–ª—ë–≤–∞
        max_score = 12
        if score >= 10:
            rating = "–û—Ç–ª–∏—á–Ω—ã–π"
            emoji = "üî•"
            color = "üü¢"
            advice = "–ò–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è —Ä—ã–±–∞–ª–∫–∏!"
        elif score >= 7:
            rating = "–•–æ—Ä–æ—à–∏–π"
            emoji = "üëç"
            color = "üü°"
            advice = "–•–æ—Ä–æ—à–∏–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ª–æ–≤–ª–∏"
        elif score >= 4:
            rating = "–°—Ä–µ–¥–Ω–∏–π"
            emoji = "‚ö°"
            color = "üü†"
            advice = "–ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª–æ–≤–∏—Ç—å"
        else:
            rating = "–ü–ª–æ—Ö–æ–π"
            emoji = "üëé"
            color = "üî¥"
            advice = "–†—ã–±–∞ –º–æ–∂–µ—Ç –Ω–µ –∫–ª–µ–≤–∞—Ç—å"

        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–Ω–∞—Å—Ç—è–º
        if score >= 8:
            spinning = "–û—Ç–ª–∏—á–Ω—ã–π"
            fishing_rod = "–û—Ç–ª–∏—á–Ω—ã–π"
        elif score >= 5:
            spinning = "–•–æ—Ä–æ—à–∏–π"
            fishing_rod = "–•–æ—Ä–æ—à–∏–π"
        elif score >= 3:
            spinning = "–°—Ä–µ–¥–Ω–∏–π"
            fishing_rod = "–°—Ä–µ–¥–Ω–∏–π"
        else:
            spinning = "–ü–ª–æ—Ö–æ–π"
            fishing_rod = "–ü–ª–æ—Ö–æ–π"

        return {
            'rating': rating,
            'emoji': emoji,
            'color': color,
            'advice': advice,
            'spinning': spinning,
            'fishing_rod': fishing_rod,
            'score': score,
            'max_score': max_score,
            'pressure_mm': round(pressure_mm, 1)
        }

    async def handle_weather_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã"""
        city = None
        
        if context.args:
            city = ' '.join(context.args)
        elif update.message.text and update.message.text not in ['üé£ –ü–æ–≥–æ–¥–∞ –∏ –∫–ª—ë–≤', 'üìä –ü–æ–º–æ—â—å']:
            city = update.message.text

        if not city:
            await update.message.reply_text("üå§ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞")
            return

        await update.message.reply_chat_action(action='typing')

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ
        weather_data = self.get_weather(city)
        
        if not weather_data:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ –ú–æ—Å–∫–≤–∞\n‚Ä¢ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥\n‚Ä¢ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"
            )
            return

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏
        fishing_conditions = self.calculate_fishing_conditions(weather_data)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""
{weather_data['description']} *–≤ {weather_data['city']}, {weather_data['country']}*

üå° *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {weather_data['temp']}¬∞C
üí® *–í–µ—Ç–µ—Ä:* {weather_data['wind_speed']} –º/—Å
üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å:* {weather_data['humidity']}%
üìä *–î–∞–≤–ª–µ–Ω–∏–µ:* {fishing_conditions['pressure_mm']} –º–º —Ä—Ç.—Å—Ç.

{fishing_conditions['color']} *–ü–†–û–ì–ù–û–ó –ö–õ–Å–í–ê:* {fishing_conditions['rating']} {fishing_conditions['emoji']}

üé£ *–°–ø–∏–Ω–Ω–∏–Ω–≥:* {fishing_conditions['spinning']}
üéè *–ü–æ–ø–ª–∞–≤–æ—á–Ω–∞—è —É–¥–æ—á–∫–∞:* {fishing_conditions['fishing_rod']}

*–û—Ü–µ–Ω–∫–∞:* {fishing_conditions['score']}/{fishing_conditions['max_score']} –±–∞–ª–ª–æ–≤
*–°–æ–≤–µ—Ç:* {fishing_conditions['advice']}
        """

        await update.message.reply_text(message, parse_mode='Markdown')

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        
        if text == 'üìä –ü–æ–º–æ—â—å':
            await self.send_help(update, context)
        elif text == 'üé£ –ü–æ–≥–æ–¥–∞ –∏ –∫–ª—ë–≤':
            await update.message.reply_text("üå§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞")
        else:
            await self.handle_weather_request(update, context)

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
        if update and update.message:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    logger.info(f"BOT_TOKEN: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if BOT_TOKEN else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    logger.info(f"WEATHER_API_KEY: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if WEATHER_API_KEY else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    fishing_bot = FishingBot()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", fishing_bot.start))
    application.add_handler(CommandHandler("help", fishing_bot.send_help))
    application.add_handler(CommandHandler("weather", fishing_bot.handle_weather_request))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, fishing_bot.handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(fishing_bot.error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ polling –Ω–∞ Render)
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
    application.run_polling()

if __name__ == '__main__':
    main()
