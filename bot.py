import os
import logging
import requests
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from datetime import datetime
import math

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –≤–∞—à–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
BOT_TOKEN = os.getenv('BOT_TOKEN', "8199190847:AAFFnG2fYEd3Zurne8yP1alevSsSeKh5VRk")
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY', "d192e284d050cbe679c3641f372e7a02")
WEBHOOK_URL = os.getenv('WEBHOOK_URL', "https://spin-fm-bot-pgjh.onrender.com")

WEATHER_API_URL_TODAY = "http://api.openweathermap.org/data/2.5/weather"
WEATHER_API_URL_FORECAST = "http://api.openweathermap.org/data/2.5/forecast"

def hpa_to_mmhg(hpa):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≥–µ–∫—Ç–æ–ø–∞—Å–∫–∞–ª–∏ –≤ –º–∏–ª–ª–∏–º–µ—Ç—Ä—ã —Ä—Ç—É—Ç–Ω–æ–≥–æ —Å—Ç–æ–ª–±–∞."""
    return hpa * 0.750062

class FishingBot:
    def __init__(self):
        self.weather_cache = {}
        self.cache_timeout = 1800

    def get_weather_data(self, city, url_type='forecast'):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã."""
        try:
            params = {
                'q': city,
                'appid': WEATHER_API_KEY,
                'units': 'metric',
                'lang': 'ru'
            }
            api_url = WEATHER_API_URL_FORECAST if url_type == 'forecast' else WEATHER_API_URL_TODAY
            response = requests.get(api_url, params=params)
            response.raise_for_status()
            data = response.json()
            return data
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –ø–æ–≥–æ–¥—ã: {e}")
            return None

    def calculate_fishing_conditions(self, temp, pressure, wind_speed):
        """
        –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—ë–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≥–æ–¥—ã —Å —Ç—Ä–µ–º—è –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏.
        """
        score = 0
        
        # –í–ª–∏—è–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        if 10 <= temp <= 20:
            score += 2
        elif temp > 20:
            score += 1
        else:
            score -= 1

        # –í–ª–∏—è–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è (–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ ~760 –º–º —Ä—Ç. —Å—Ç.)
        pressure_mmhg = hpa_to_mmhg(pressure)
        if 755 <= pressure_mmhg <= 765:
            score += 2
        elif pressure_mmhg < 755:
            score += 1
        else:
            score -= 1

        # –í–ª–∏—è–Ω–∏–µ –≤–µ—Ç—Ä–∞
        if wind_speed < 5:
            score += 2
        elif wind_speed >= 5:
            score += 1

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –∏ –µ–¥–∏–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—á–∫–æ–≤
        if score >= 4:
            icon = "üü¢"
            advice = "–ö–ª–µ–≤–∞—Ç—å –±—É–¥–µ—Ç —Ç–∞–∫, —á—Ç–æ –∫–ª–∏–µ–Ω—Ç –ø–æ–∑–∞–±—É–¥–µ—Ç –æ–±–æ –≤—Å—ë–º –Ω–∞ —Å–≤–µ—Ç–µ! *–ë—Ä–∏–ª–ª–∏–∞–Ω—Ç–æ–≤–∞—è —Ä—É–∫–∞."
        elif score >= 2:
            icon = "üü°"
            advice = "–ï—Å–ª–∏ –æ—á–µ–Ω—å —Ö–æ—á–µ—Ç—Å—è –∏ –¥–µ–ª–∞—Ç—å –≤—Å–µ —Ä–∞–≤–Ω–æ –Ω–µ—á–µ–≥–æ, —Ç–æ –º–æ–∂–Ω–æ –∏ –ø–æ—Ä—ã–±–∞—á–∏—Ç—å."
        else:
            icon = "üî¥"
            advice = "–õ—É—á—à–µ –æ—Å—Ç–∞—Ç—å—Å—è –¥–æ–º–∞ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ—Ä–∏–∞–ª—å—á–∏–∫üòú"
            
        return icon, advice

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        keyboard = [
            [KeyboardButton('üé£ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')],
            [KeyboardButton('üé£ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π')],
            [KeyboardButton('üìä –ü–æ–º–æ—â—å')]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        
        welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø —Ç–≤–æ–π —Ä—ã–±–æ–ª–æ–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫!
üå§ –Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ –∏ —Å–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª—ë–≤ —Ä—ã–±—ã.
üéØ –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É, –∏ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –ø—Ä–æ–≥–Ω–æ–∑!
"""
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.first_name}")

    async def send_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        help_text = """
–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:
* –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "**–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è**" –∏–ª–∏ "**–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π**".
* –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∫–æ–≥–¥–∞ —è –ø–æ–ø—Ä–æ—à—É.
* –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ —Å–Ω–æ–≤–∞ —É–≤–∏–¥–µ—Ç—å –∫–Ω–æ–ø–∫–∏.
"""
        await update.message.reply_text(help_text)

    async def prompt_city(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç."""
        button_text = update.message.text
        if button_text == 'üé£ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è':
            context.user_data['forecast_type'] = 'today'
        elif button_text == 'üé£ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π':
            context.user_data['forecast_type'] = 'forecast'
        
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑.")

    async def handle_city_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑."""
        city = update.message.text
        forecast_type = context.user_data.get('forecast_type')

        if not forecast_type:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–∏–ø –ø—Ä–æ–≥–Ω–æ–∑–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫.")
            return
            
        await update.message.reply_text(f"–ò—â—É –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≥–æ—Ä–æ–¥–∞ **{city}**...")
        
        weather_data = self.get_weather_data(city, url_type=forecast_type)
        
        if not weather_data:
            await update.message.reply_text("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        if forecast_type == 'today':
            main_data = weather_data['main']
            wind_speed = weather_data['wind']['speed']
            clouds = weather_data['clouds']['all']
            pressure_mmhg = hpa_to_mmhg(main_data['pressure'])

            fishing_icon, fishing_advice = self.calculate_fishing_conditions(
                main_data['temp'],
                main_data['pressure'],
                wind_speed
            )
            
            forecast_text = f"**–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è {city.capitalize()}:**\n"
            forecast_text += f"üå°Ô∏è **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞**: {main_data['temp']:.1f}¬∞C\n"
            forecast_text += f"üå¨Ô∏è **–í–µ—Ç–µ—Ä**: {wind_speed:.1f} –º/—Å\n"
            forecast_text += f"üíß **–í–ª–∞–∂–Ω–æ—Å—Ç—å**: {main_data['humidity']}%\n"
            forecast_text += f"üìâ **–î–∞–≤–ª–µ–Ω–∏–µ**: {pressure_mmhg:.1f} –º–º —Ä—Ç. —Å—Ç.\n"
            forecast_text += f"üêü **–ö–ª—ë–≤**: **{fishing_icon} {fishing_advice}**"

        else: # forecast_type == 'forecast'
            forecast_text = f"–ü—Ä–æ–≥–Ω–æ–∑ –∫–ª—ë–≤–∞ –∏ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ **{city.capitalize()}**:\n\n"
            
            current_hour = datetime.now().hour
            if 5 <= current_hour < 10 or 17 <= current_hour < 22:
                forecast_text += "‚ú® **–°–µ–π—á–∞—Å –ª—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏! –£—Ç—Ä–µ–Ω–Ω–∏–π –∏ –≤–µ—á–µ—Ä–Ω–∏–π –∫–ª—ë–≤ —Å–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ.**\n\n"
            
            for item in weather_data['list'][::8]:
                date_time = datetime.fromtimestamp(item['dt'])
                main_data = item['main']
                wind_speed = item['wind']['speed']
                clouds = item['clouds']['all']
                pressure_mmhg = hpa_to_mmhg(main_data['pressure'])
                
                fishing_icon, fishing_advice = self.calculate_fishing_conditions(
                    main_data['temp'],
                    main_data['pressure'],
                    wind_speed
                )
                
                forecast_text += f"**{date_time.strftime('%A, %d %B')}**\n"
                forecast_text += f"üå°Ô∏è **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞**: {main_data['temp']:.1f}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {main_data['feels_like']:.1f}¬∞C\n"
                forecast_text += f"üå¨Ô∏è **–í–µ—Ç–µ—Ä**: {wind_speed:.1f} –º/—Å\n"
                forecast_text += f"‚òÅÔ∏è **–û–±–ª–∞—á–Ω–æ—Å—Ç—å**: {clouds}%\n"
                forecast_text += f"üíß **–í–ª–∞–∂–Ω–æ—Å—Ç—å**: {main_data['humidity']}%\n"
                forecast_text += f"üìâ **–î–∞–≤–ª–µ–Ω–∏–µ**: {pressure_mmhg:.1f} –º–º —Ä—Ç. —Å—Ç.\n"
                forecast_text += f"üêü **–ö–ª—ë–≤**: **{fishing_icon} {fishing_advice}**\n"
                forecast_text += "‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì\n"
            
        await update.message.reply_text(forecast_text)
        context.user_data.pop('forecast_type', None)

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
        if update and update.message:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –ø–µ—Ä–µ–¥–µ–ª–∞–Ω–Ω–∞—è –ø–æ–¥ –≤–µ–±—Ö—É–∫."""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∫–∞–∫ –≤–µ–±-—Å–µ—Ä–≤–∏—Å–∞...")
    
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    if not WEATHER_API_KEY:
        logger.error("‚ùå WEATHER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    fishing_bot = FishingBot()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", fishing_bot.start))
    application.add_handler(CommandHandler("help", fishing_bot.send_help))
    
    application.add_handler(MessageHandler(filters.Regex('^üé£ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è$'), fishing_bot.prompt_city))
    application.add_handler(MessageHandler(filters.Regex('^üé£ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π$'), fishing_bot.prompt_city))
    application.add_handler(MessageHandler(filters.Regex('^üìä –ü–æ–º–æ—â—å$'), fishing_bot.send_help))
    
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, fishing_bot.handle_city_input))

    application.add_error_handler(fishing_bot.error_handler)

    port = int(os.environ.get('PORT', 8080))
    application.run_webhook(
        listen="0.0.0.0",
        port=port,
        url_path=BOT_TOKEN,
        webhook_url=f"{WEBHOOK_URL}/{BOT_TOKEN}"
    )

if __name__ == '__main__':
    main()
