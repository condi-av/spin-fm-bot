import os
import logging
import requests
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from datetime import datetime
import math

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å –≤–∞—à–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
BOT_TOKEN = os.getenv('BOT_TOKEN', "8199190847:AAFFnG2fYEd3Zurne8yP1alevSsSeKh5VRk")
WEATHER_API_KEY = os.getenv('WEATHER_API_KEY', "d192e284d050cbe679c3641f372e7a02")
WEATHER_API_URL_FORECAST = "http://api.openweathermap.org/data/2.5/forecast"

class FishingBot:
    def __init__(self):
        self.weather_cache = {}
        self.cache_timeout = 1800  # 30 –º–∏–Ω—É—Ç

    def get_weather_data(self, city):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π."""
        try:
            params = {
                'q': city,
                'appid': WEATHER_API_KEY,
                'units': 'metric',
                'lang': 'ru'
            }
            response = requests.get(WEATHER_API_URL_FORECAST, params=params)
            response.raise_for_status()
            data = response.json()
            return data
        except requests.exceptions.RequestException as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –ø–æ–≥–æ–¥—ã: {e}")
            return None

    def calculate_fishing_conditions(self, temp, pressure, wind_speed, clouds):
        """
        –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—ë–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≥–æ–¥—ã.
        –£—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è.
        """
        score = 0
        advice = ""
        
        # –í–ª–∏—è–Ω–∏–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
        if 10 <= temp <= 20:
            score += 2
            advice += "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –æ—Ç–ª–∏—á–Ω–∞—è –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –≤–∏–¥–æ–≤ —Ä—ã–±. "
        elif temp > 20:
            score += 1
            advice += "–í —Ç—ë–ø–ª–æ–π –≤–æ–¥–µ —Ä—ã–±–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–∞, –∏—â–∏—Ç–µ –µ—ë –Ω–∞ –≥–ª—É–±–∏–Ω–µ. "
        else:
            score -= 1
            advice += "–í–æ–¥–∞ —Ö–æ–ª–æ–¥–Ω–∞—è, –∫–ª—ë–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–º. "

        # –í–ª–∏—è–Ω–∏–µ –¥–∞–≤–ª–µ–Ω–∏—è
        if 1010 <= pressure <= 1020:
            score += 2
            advice += "–î–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ, —Ä—ã–±–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω–∞. "
        elif pressure < 1010:
            score += 1
            advice += "–î–∞–≤–ª–µ–Ω–∏–µ –ø–∞–¥–∞–µ—Ç ‚Äì –∫–ª—ë–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ä–æ—à–∏–π. "
        else:
            score -= 1
            advice += "–í—ã—Å–æ–∫–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ, —Ä—ã–±–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ –∞–∫—Ç–∏–≤–Ω–∞. "

        # –í–ª–∏—è–Ω–∏–µ –≤–µ—Ç—Ä–∞ –∏ –æ–±–ª–∞—á–Ω–æ—Å—Ç–∏
        if wind_speed < 5 and clouds < 50:
            score += 2
            advice += "–¢–∏—Ö–∞—è, —è—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞. –û—Ç–ª–∏—á–Ω–æ –¥–ª—è –ø–æ–ø–ª–∞–≤–æ—á–Ω–æ–π —Ä—ã–±–∞–ª–∫–∏. "
        elif wind_speed >= 5:
            score += 1
            advice += "–ù–µ–±–æ–ª—å—à–æ–π –≤–µ—Ç–µ—Ä —Ä—è–±–∏—Ç –≤–æ–¥—É, —á—Ç–æ —Ö–æ—Ä–æ—à–æ –¥–ª—è —Ö–∏—â–Ω–∏–∫–∞. "
        else:
            advice += "–°–∏–ª—å–Ω—ã–π –≤–µ—Ç–µ—Ä, –∫–ª—ë–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω—ã–º. "

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—á–∫–æ–≤
        if score >= 4:
            icon = "üü¢"  # –û—Ç–ª–∏—á–Ω—ã–π –∫–ª—ë–≤
        elif score >= 2:
            icon = "üü°"  # –°—Ä–µ–¥–Ω–∏–π –∫–ª—ë–≤
        else:
            icon = "üî¥"  # –ü–ª–æ—Ö–æ–π –∫–ª—ë–≤
            
        return icon, advice

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        keyboard = [
            [KeyboardButton('üé£ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π')],
            [KeyboardButton('üìä –ü–æ–º–æ—â—å')]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        
        welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø —Ç–≤–æ–π —Ä—ã–±–æ–ª–æ–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫!

üå§ –Ø –º–æ–≥—É –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ –∏ —Å–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –∫–ª—ë–≤ —Ä—ã–±—ã –Ω–∞ 5 –¥–Ω–µ–π.

üéØ –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´üé£ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω–µ–π¬ª –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞!
"""
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.first_name}")

    async def send_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        help_text = """
–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:
* –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –ø—Ä–∏—à–ª—é –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –∏ –∫–ª—ë–≤–∞ –Ω–∞ 5 –¥–Ω–µ–π.
* –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /start, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.
* –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞.
"""
        await update.message.reply_text(help_text)

    async def handle_weather_request(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã –∏ –∫–ª—ë–≤–∞"""
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤)"""
        city = update.message.text
        await update.message.reply_text(f"–ò—â—É –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city}...")
        
        weather_data = self.get_weather_data(city)
        
        if not weather_data:
            await update.message.reply_text("–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        forecast_text = f"–ü—Ä–æ–≥–Ω–æ–∑ –∫–ª—ë–≤–∞ –∏ –ø–æ–≥–æ–¥—ã –Ω–∞ 5 –¥–Ω–µ–π –¥–ª—è –≥–æ—Ä–æ–¥–∞ {city.capitalize()}:\n\n"
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–∑—ã –ª—É–Ω—ã (–ø—Ä–∏–º–µ—Ä–Ω–æ, —Ç–∞–∫ –∫–∞–∫ OneCall API –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω—ã—Ö —Ñ–∞–∑ –ª—É–Ω—ã, –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç, 
        # –Ω–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å –∏–∑ daily forecast.
        # –í —ç—Ç–æ–º API –Ω–µ—Ç moon_phase, –ø–æ—ç—Ç–æ–º—É –º—ã –¥–∞–¥–∏–º –æ–±—â–∏–π —Å–æ–≤–µ—Ç, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
        current_hour = datetime.now().hour
        if 5 <= current_hour < 10 or 17 <= current_hour < 22:
            forecast_text += "‚ú® –°–µ–π—á–∞—Å –ª—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä—ã–±–∞–ª–∫–∏! –£—Ç—Ä–µ–Ω–Ω–∏–π –∏ –≤–µ—á–µ—Ä–Ω–∏–π –∫–ª—ë–≤ —Å–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ.\n\n"
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å–ø–∏—Å–∫—É –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        for item in weather_data['list'][::8]:  # –ö–∞–∂–¥—ã–µ 8 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ = 1 –¥–µ–Ω—å
            date_time = datetime.fromtimestamp(item['dt'])
            main_data = item['main']
            weather_desc = item['weather'][0]['description']
            wind_speed = item['wind']['speed']
            clouds = item['clouds']['all']
            
            # –ü—Ä–æ–≥–Ω–æ–∑ –∫–ª—ë–≤–∞
            fishing_icon, fishing_advice = self.calculate_fishing_conditions(
                main_data['temp'],
                main_data['pressure'],
                wind_speed,
                clouds
            )
            
            forecast_text += f"**{date_time.strftime('%A, %d %B')}**\n"
            forecast_text += f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {main_data['temp']:.1f}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {main_data['feels_like']:.1f}¬∞C\n"
            forecast_text += f"üå¨Ô∏è –í–µ—Ç–µ—Ä: {wind_speed:.1f} –º/—Å\n"
            forecast_text += f"‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ—Å—Ç—å: {clouds}%\n"
            forecast_text += f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {main_data['humidity']}%\n"
            forecast_text += f"üìâ –î–∞–≤–ª–µ–Ω–∏–µ: {main_data['pressure']} hPa\n"
            forecast_text += f"üêü –ö–ª—ë–≤: **{fishing_icon} {fishing_advice}**\n"
            forecast_text += "‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì‚Äì\n"
            
        await update.message.reply_text(forecast_text)

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
        if update and update.message:
            await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    logger.info(f"BOT_TOKEN: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if BOT_TOKEN else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    logger.info(f"WEATHER_API_KEY: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if WEATHER_API_KEY else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    
    if not BOT_TOKEN:
        logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    if not WEATHER_API_KEY:
        logger.error("‚ùå WEATHER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
    fishing_bot = FishingBot()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", fishing_bot.start))
    application.add_handler(CommandHandler("help", fishing_bot.send_help))
    application.add_handler(CommandHandler("weather", fishing_bot.handle_weather_request))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, fishing_bot.handle_message))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(fishing_bot.error_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–±–µ–∑ polling)
    # application.run_polling(poll_interval=1)
    application.run_polling()
